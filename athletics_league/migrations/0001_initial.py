# Generated by Django 2.2.12 on 2020-10-18 15:51

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AgeGroup',
            fields=[
                ('AgeGroup_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Age Grop across whole league', primary_key=True, serialize=False)),
                ('AgeGroup_name', models.CharField(max_length=20)),
                ('AgeGroup_description', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('Athlete_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Athlete across whole league', primary_key=True, serialize=False)),
                ('Athlete_Name', models.CharField(max_length=20)),
                ('Athlete_Surname', models.CharField(max_length=20)),
                ('Date_of_birth', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('u13', 'under 13'), ('u15', 'under 15'), ('u17', 'under 17'), ('u20', 'under 20')], default='u13', help_text='athlete age group', max_length=1000)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Felmale')], default='M', help_text='Athlete Gender', max_length=1000000)),
            ],
        ),
        migrations.CreateModel(
            name='AthleteRanking',
            fields=[
                ('AthleteRanking_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Athlete Ranking across whole league', primary_key=True, serialize=False)),
                ('ranking', models.PositiveIntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Club_Name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('Coach_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Age Grop across whole league', primary_key=True, serialize=False)),
                ('Coach_name', models.CharField(max_length=20)),
                ('Coach_surname', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular event', primary_key=True, serialize=False)),
                ('event_time', models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('eventParticipant_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular event participant', primary_key=True, serialize=False)),
                ('bib', models.CharField(max_length=3)),
                ('lane', models.PositiveIntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='FieldEventResult',
            fields=[
                ('FieldEventResult_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular field event result', primary_key=True, serialize=False)),
                ('distance', models.DecimalField(decimal_places=1, max_digits=20)),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('League_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular league', primary_key=True, serialize=False)),
                ('League_Name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('meeting_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular meet', primary_key=True, serialize=False)),
                ('meeting_name', models.CharField(max_length=40)),
                ('meeting_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('season_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular season', primary_key=True, serialize=False)),
                ('season_Name', models.CharField(max_length=20)),
                ('season_year', models.CharField(blank=True, choices=[('15/16', '2015/2016'), ('16/17', '2016/2017'), ('17/18', '2017/2018'), ('18/19', '2018/2019'), ('19/20', '2019/2020'), ('20/21', '2020/2021'), ('21/22', '2021/2022')], default='15/16', help_text='Season', max_length=10000000)),
            ],
        ),
        migrations.CreateModel(
            name='Speciality',
            fields=[
                ('Speciality_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Speciality across whole league', primary_key=True, serialize=False)),
                ('speciality_name', models.CharField(max_length=50)),
                ('status', models.CharField(blank=True, choices=[('T', 'Track'), ('F', 'Field')], default='T', help_text='speciality type', max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('Venue_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Venue', primary_key=True, serialize=False)),
                ('Venue_name', models.CharField(max_length=40)),
                ('Venue_location', models.CharField(max_length=40)),
                ('status', models.CharField(blank=True, choices=[('Su', 'Surrey'), ('We', 'Wessex'), ('Sus', 'Sussex'), ('Ke', 'Kent'), ('Es', 'Essex')], default='Su', help_text='county', max_length=10000000)),
            ],
        ),
        migrations.CreateModel(
            name='TrackEventResult',
            fields=[
                ('TrackEventResult_ID', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular track event result', primary_key=True, serialize=False)),
                ('EventParticipant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.EventParticipant')),
            ],
        ),
        migrations.AddConstraint(
            model_name='speciality',
            constraint=models.UniqueConstraint(fields=('speciality_name',), name='unique speciality name'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='League',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.League'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='Season',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Season'),
        ),
        migrations.AddField(
            model_name='fieldeventresult',
            name='EventParticipant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.EventParticipant'),
        ),
        migrations.AddField(
            model_name='eventparticipant',
            name='Athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Athlete'),
        ),
        migrations.AddField(
            model_name='eventparticipant',
            name='Event',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Event'),
        ),
        migrations.AddField(
            model_name='event',
            name='Meeting',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Meeting'),
        ),
        migrations.AddField(
            model_name='event',
            name='Speciality',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Speciality'),
        ),
        migrations.AddField(
            model_name='club',
            name='League',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.League'),
        ),
        migrations.AddField(
            model_name='athleteranking',
            name='Athlete',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Athlete'),
        ),
        migrations.AddField(
            model_name='athleteranking',
            name='Season',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Season'),
        ),
        migrations.AddField(
            model_name='athleteranking',
            name='Speciality',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Speciality'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='AgeGroup',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.AgeGroup'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='Club',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='athletics_league.Club'),
        ),
        migrations.AddConstraint(
            model_name='eventparticipant',
            constraint=models.UniqueConstraint(fields=('Event', 'Athlete'), name='unique athlete for event'),
        ),
        migrations.AddConstraint(
            model_name='eventparticipant',
            constraint=models.UniqueConstraint(fields=('Event', 'bib'), name='unique bib for event'),
        ),
        migrations.AddConstraint(
            model_name='athleteranking',
            constraint=models.UniqueConstraint(fields=('Athlete', 'Speciality', 'Season'), name='unique ranking per speciality per season'),
        ),
    ]
